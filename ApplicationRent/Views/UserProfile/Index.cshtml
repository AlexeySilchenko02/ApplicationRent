@model UserProfileViewModel
@using System.Globalization

<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

<main class="main lk">
    <section class="lk-title-section">
        <div class="lk-title-container">
            <h1 class="lk-title-h1">Личный кабинет пользователя @Model.User.FullNameUser</h1>
        </div>
    </section>

    <div class="lk-balance-container">
        <p class="lk-balance">Баланс: <span class="lk-balance-number" id="user-balance">@Model.User.Balance.ToString("C", new CultureInfo("ru-RU"))</span></p>
    </div>

    <div class="lk-balance-actions-container">
        <div class="lk-balance-actions-grid">
            <div>
                <button type="button" class="dg-large-btn" onclick="window.location.href='@Url.Action("TopUpBalance", "UserProfile")'" >Пополнить баланс</button>
            </div>
            <div>
                <button type="button" class="lg-large-btn" onclick="window.location.href='@Url.Action("TransactionHistory", "UserProfile")'">История транзакций</button>
            </div>
        </div>
    </div>
    <div div class="lk-form-container">
        <form id="updateUserProfileForm" asp-action="UpdateUserProfile" method="post" onsubmit="updateUserProfile(event)">
            <div class="lk-form-group">
                <div class="lk-form-label-container">
                    <label class="lk-form-label" for="FullNameUser">Полное имя</label>
                </div>
                <input type="text" class="lk-form-input" id="FullNameUser" name="FullNameUser" value="@Model.User.FullNameUser" required>
            </div>
            <div class="lk-form-group">
                <div class="lk-form-label-container">
                    <label class="lk-form-label" for="Email">Email</label>
                </div>                
                <input type="email" class="lk-form-input" id="Email" name="Email" value="@Model.User.Email" required>
                <div id="emailError" class="text-danger" style="display:none;"></div>
            </div>
            <div class="lk-form-group-last">
                <div class="lk-form-label-container">
                    <label class="lk-form-label" for="PhoneNumber">Номер телефона</label>
                </div>
                <input type="tel" class="lk-form-input" id="PhoneNumber" name="PhoneNumber" value="@Model.User.PhoneNumber" required>
            </div>
            <button type="submit" class="lg-small-btn">Обновить</button>
        </form>
        
    </div>
    <button type="button" class="dg-large-btn" onclick="window.location.href='@Url.Action("ChangePassword", "UserProfile")'">Изменить пароль</button>
    
    <div class="lk-subtitle-container">
        <h1 class="lk-subtitle-h2">Моя аренда</h1>
    </div>

    @if (Model.Rentals.Any())
    {
        <table class="lk-table">
            <thead>
                <tr>
                    <th>Место</th>
                    <th>Начало аренды</th>
                    <th>Окончание аренды</th>
                    <th>Продление аренды</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var rental in Model.Rentals)
                {
                    <tr>
                        <td>@rental.Place.Name</td>
                        <td>@rental.StartRent.ToString("dd.MM.yyyy")</td>
                        <td>@rental.EndRent.ToString("dd.MM.yyyy")</td>
                        <td>
                            <button type="button" class="calendar-text" onclick="toggleForm('@rental.Id')">Продлить аренду</button>
                            <form id="form-@rental.Id" style="display:none;" data-endrent="@rental.EndRent.ToString("yyyy-MM-dd")">
                                <input type="hidden" name="rentalId" value="@rental.Id" />
                                <input type="date" class="calendar-input" name="newEndDate" onchange="calculateCost(@rental.Id, @rental.Place.Price)" />
                                <p id="cost-text-@rental.Id" class="calendar-cost" style="display:none;">Стоимость: <span id="cost-@rental.Id">0</span></p>
                                <button type="button" class="calendar-text" onclick="extendRent(@rental.Id, @rental.Place.Price)">Обновить</button>
                                <div id="error-@rental.Id" class="text-danger" style="display:none;"></div>
                            </form>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="calendar-text">Нет актуальных мест аренды</p>
    }

</main>

<script>
    function updateUserProfile(event) {
        // Предотвращаем действие по умолчанию (отправку формы)
        event.preventDefault();
        var form = document.getElementById('updateUserProfileForm');
        var formData = new FormData(form);

        // Отправляем AJAX-запрос
        fetch(form.action, {
            method: 'POST',
            body: formData,
            headers: {
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
            .then(response => {
                if (response.ok) {
                    // Если ответ успешен, перезагружаем страницу
                    window.location.reload();
                } else if (response.status === 400) {
                    // Если ответ содержит ошибку 400 (неверные данные), обрабатываем ошибку
                    response.json().then(data => {
                        if (data.errors) {
                            // Скрываем все старые ошибки
                            document.querySelectorAll('.text-danger').forEach(element => {
                                element.style.display = 'none';
                            });

                            // Если есть ошибки, отображаем их
                            for (var key in data.errors) {
                                var errorElement = document.getElementById(key + 'Error');
                                if (errorElement) {
                                    errorElement.innerText = data.errors[key];
                                    errorElement.style.display = 'block';
                                }
                            }
                        }
                    });
                }
            })
            .catch(error => console.error('Error:', error));
    }
    function toggleForm(rentalId) {
        var form = document.getElementById('form-' + rentalId);
        if (form.style.display === 'none') {
            form.style.display = 'block';
            var endRent = form.getAttribute('data-endrent');
            form.elements['newEndDate'].value = endRent;
        } else {
            form.style.display = 'none';
        }
    }

    function calculateCost(rentalId, monthlyPrice) {
        var form = document.getElementById('form-' + rentalId);
        var newEndDate = new Date(form.elements['newEndDate'].value);
        var currentEndDate = new Date(form.getAttribute('data-endrent'));

        var diffTime = Math.abs(newEndDate - currentEndDate);
        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

        var dailyPrice = monthlyPrice / 28;
        var cost = diffDays * dailyPrice;

        document.getElementById('cost-' + rentalId).innerText = cost.toFixed(2);
        document.getElementById('cost-text-' + rentalId).style.display = 'block';
    }

    function extendRent(rentalId, monthlyPrice) {
        var form = document.getElementById('form-' + rentalId);
        var newEndDate = form.elements['newEndDate'].value;
        var cost = parseFloat(document.getElementById('cost-' + rentalId).innerText);

        fetch('/UserProfile/UpdateRentalEndDate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({
                rentalId: rentalId,
                newEndDate: newEndDate,
                cost: cost
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    window.location.reload();
                } else {
                    var errorElement = document.getElementById('error-' + rentalId);
                    errorElement.innerText = data.error;
                    errorElement.style.display = 'block';
                }
            })
            .catch(error => console.error('Error:', error));
    }
</script>
