@{
    ViewData["Title"] = "Аренда";
}

@model ApplicationRent.Controllers.RequestsRentViewModel

<main class="main lk-center">
    <section class="lk-title-section">
        <div class="lk-title-container">
            <h1 class="lk-title-h1-center">Аренда помещения: @Model.PlaceName</h1>
        </div>
    </section>

    <div class="tabs-container">
        <div class="tab">
            <div id="card-view" style="display:none;" class="tab-content">
                <p class="tabs-label">Текущий баланс: <span id="userBalance">@Model.UserBalance</span> руб.</p>
                <form id="confirmRentForm">
                    <input type="hidden" asp-for="PlaceId" />
                    <div class="form-group">
                        <label asp-for="StartRent" class="tabs-label">Дата начала</label>
                        <input asp-for="StartRent" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;" type="date" id="startRent" />
                    </div>
                    <div class="form-group">
                        <label asp-for="EndRent" class="tabs-label">Дата окончания</label>
                        <input asp-for="EndRent" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;" type="date" id="endRent" />
                    </div>
                    <p class="tabs-label">Стоимость аренды: <span id="rentCost">0</span> руб.</p>
                    <p id="insufficientFunds" style="color:red; display:none;" class="tabs-label">Недостаточно средств</p>
                    <button type="button" class="dg-large-btn" style="border: 1px solid #ccc;" id="confirmRentButton">Подтвердить аренду</button>
                    <div id="confirmRentErrors" style="color:red;" class="tabs-label"></div>
                </form>
            </div>
            <div id="list-view" style="display:none;" class="tab-content">
                @* <p>Долгосрочная аренда</p> *@
                <form id="requestRentForm">
                    <input type="hidden" asp-for="PlaceId" />
                    <input type="hidden" name="Category" value="@Model.Category" />
                    <input type="hidden" name="PlaceName" value="@Model.PlaceName" />
                    <div class="form-group">
                        <label asp-for="UserName" class="tabs-label">Имя</label>
                        <input asp-for="UserName" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;" />
                    </div>
                    <div class="form-group">
                        <label asp-for="UserEmail" class="tabs-label">Email</label>
                        <input asp-for="UserEmail" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;" />
                    </div>
                    <div class="form-group">
                        <label asp-for="UserPhone" class="tabs-label">Телефон</label>
                        <input asp-for="UserPhone" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;" />
                    </div>
                    <div class="form-group">
                        <label asp-for="StartRent" class="tabs-label">Дата начала</label>
                        <input asp-for="StartRent" type="date" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;" />
                    </div>
                    <div class="form-group">
                        <label for="rentDuration" class="tabs-label">Срок аренды (в месяцах)</label>
                        <select id="rentDuration" name="RentDuration" class="form-control" style="border: 3px solid #D1E8E2; border-radius: 10px;">
                            <option value="1">1 месяц</option>
                            <option value="2">2 месяца</option>
                            <option value="3">3 месяца</option>
                            <option value="4">4 месяца</option>
                        </select>
                        <button type="button" class="dg-large-btn" style="border: 1px solid #ccc; margin-top: 20px;" id="requestRentButton">Отправить заявку</button>
                    </div>
                    <div id="requestRentErrors" style="color:red;"></div>
                </form>
            </div>

            <div class="tab-nav">
                @if (Model.IsOnlineRentAvailable)
                {
                    <input checked id="show-cards" name="tab-btn" type="radio" value="">
                    <label for="show-cards" class="tabs-label">Онлайн аренда</label>
                }
                <input id="show-list" name="tab-btn" type="radio" value="">
                <label for="show-list" class="tabs-label">Заявка на долгосрочную аренду</label>
                
                
            </div>
        </div>
    </div>
@*     <div>
        @if (Model.IsOnlineRentAvailable)
        {
            <button id="show-cards">Онлайн аренда</button>
        }
        <button id="show-list">Заявка на аренду</button>
    </div> *@

    <div class="back-btn balance-btn-container">
        <button type="button" class="lg-small-btn" onclick="window.location.href='@Url.Action("Index", "Place")'">Назад</button>
    </div>
    @* <button type="button" class="btn btn-secondary" onclick="window.location.href='@Url.Action("Index", "Place")';">Отмена</button> *@

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const showCards = document.getElementById("show-cards");
            const showList = document.getElementById("show-list");
            const cardView = document.getElementById("card-view");
            const listView = document.getElementById("list-view");
            const startRentInput = document.getElementById("startRent");
            const endRentInput = document.getElementById("endRent");
            const rentCost = document.getElementById("rentCost");
            const userBalance = parseFloat(document.getElementById("userBalance").textContent);
            const confirmRentButton = document.getElementById("confirmRentButton");
            const insufficientFunds = document.getElementById("insufficientFunds");
            const placePrice = parseFloat(@Model.PlacePrice);
            const confirmRentErrors = document.getElementById("confirmRentErrors");
            const requestRentErrors = document.getElementById("requestRentErrors");

            function calculateRentCost() {
                const startRent = new Date(startRentInput.value);
                const endRent = new Date(endRentInput.value);
                const timeDiff = endRent - startRent;
                const days = timeDiff / (1000 * 3600 * 24) + 1; // Добавляем 1 день, чтобы включить последний день аренды
                const dailyRate = placePrice / 28;
                const totalCost = dailyRate * days;
                return totalCost.toFixed(2);
            }

            function updateRentCost() {
                const cost = calculateRentCost();
                rentCost.textContent = cost;
                if (parseFloat(cost) > userBalance) {
                    insufficientFunds.style.display = "block";
                    confirmRentButton.disabled = true;
                } else {
                    insufficientFunds.style.display = "none";
                    confirmRentButton.disabled = false;
                }
            }

            startRentInput.addEventListener("change", updateRentCost);
            endRentInput.addEventListener("change", updateRentCost);

            // Показать карточки по умолчанию, если доступно
            if (showCards) {
                cardView.style.display = "block";
                listView.style.display = "none";
            } else {
                cardView.style.display = "none";
                listView.style.display = "block";
            }

            if (showCards) {
                showCards.addEventListener("click", function () {
                    cardView.style.display = "block";
                    listView.style.display = "none";
                });
            }

            showList.addEventListener("click", function () {
                cardView.style.display = "none";
                listView.style.display = "block";
            });

            // Рассчитываем и обновляем стоимость аренды при загрузке страницы
            updateRentCost();

            // Обработка формы онлайн аренды
            confirmRentButton.addEventListener("click", function () {
                const formData = new FormData(document.getElementById("confirmRentForm"));
                fetch('@Url.Action("ConfirmRent", "Place")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert("Аренда подтверждена");
                            window.location.href = '@Url.Action("Index", "Place")';
                        } else {
                            confirmRentErrors.textContent = data.errors.join(', ');
                            alert(data.message);
                        }
                    });
            });

            // Обработка формы заявки на аренду
            document.getElementById("requestRentButton").addEventListener("click", function () {
                const formData = new FormData(document.getElementById("requestRentForm"));
                fetch('@Url.Action("RequestRent", "Place")', {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert("Заявка на аренду отправлена");
                            window.location.href = '@Url.Action("Index", "Place")';
                        } else {
                            document.getElementById("requestRentErrors").textContent = data.errors.join(', ');
                            alert(data.message);
                        }
                    });
            });

            // Заполнить данные формы при загрузке страницы
            function preloadFormData() {
                const formData = new FormData(document.getElementById("requestRentForm"));
                fetch('@Url.Action("RequestRent", "Place")', {
                    method: 'GET',
                    body: formData,
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            document.getElementById("UserName").value = data.userName;
                            document.getElementById("UserEmail").value = data.userEmail;
                            document.getElementById("UserPhone").value = data.userPhone;
                            document.getElementById("StartRent").value = data.startRent;
                            document.getElementById("rentDuration").value = data.rentDuration;
                        } else {
                            requestRentErrors.textContent = data.errors.join(', ');
                            alert(data.message);
                        }
                    });
            }

            preloadFormData();
        });
    </script>
</main>