@using ApplicationRent.Data.Identity
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationIdentityUser> SignInManager
@{
    ViewData["Title"] = "Аренда";
}
@model IEnumerable<ApplicationRent.Data.Identity.Place>

@using ApplicationRent.Controllers

<main class="main">
    <section class="rent-title-section">
        <div class="rent-title-container">
            <h1 class="rent-title-h1">Помещения</h1>
        </div>
    </section>

    <style>
        .place-card {
            width: 150px;
            height: 150px;
            margin: 10px;
            padding: 10px;
            box-shadow: 0 0 5px #ccc;
            display: inline-block;
            vertical-align: top;
            position: relative;
        }

            .place-card.rented {
                background-color: red;
            }

            .place-card .place-info {
                margin-bottom: 20px;
            }

            .place-card .actions {
                position: absolute;
                bottom: 10px;
                width: 100%;
                text-align: center;
            }

        .action-btn {
            text-decoration: none;
            color: white;
            background-color: #007bff;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
        }

            .action-btn:not(:last-child) {
                margin-right: 5px;
            }

        .place-card.not-rented {
            background-color: green;
        }

        .place-cards-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: start;
        }
    </style>

    <section class="rent-filters">
        <div class="rent-filters-container">
            <form id="filter-form" method="get" asp-controller="Place" asp-action="Filter">
                <div class="filter-container">
                    <div uk-form-custom="target: > * > span:first-child">
                        <label for="Category" class="rent-filter-label">Категория</label>
                        <select id="Category" name="Category">
                            <option value="">Все</option>
                            <option value="Фотостудия">Фотостудия</option>
                            <option value="Склад">Склад</option>
                            <option value="Офис">Офис</option>
                            <option value="Базовое место">Базовое место</option>
                        </select>
                        <button class="uk-button uk-button-default" type="button" tabindex="-1">
                            <span style="text-transform: none;"></span>
                            <span uk-icon="icon: chevron-down"></span>
                        </button>
                    </div>
                    
                    <div uk-form-custom="target: > * > span:first-child">
                        <label for="PriceSort" class="rent-filter-label">Сортировать по цене:</label>
                        <select id="PriceSort" name="PriceSort">
                            <option value="">Выберите</option>
                            <option value="PriceAsc">По возрастанию</option>
                            <option value="PriceDesc">По убыванию</option>
                        </select>
                        <button class="uk-button uk-button-default" type="button" tabindex="-1">
                            <span style="text-transform: none;"></span>
                            <span uk-icon="icon: chevron-down"></span>
                        </button>
                    </div>
                    
                    <div uk-form-custom="target: > * > span:first-child">
                        <label for="SizeSort" class="rent-filter-label">Сортировать по размеру:</label>
                        <select id="SizeSort" name="SizeSort">
                            <option value="">Выберите</option>
                            <option value="SizeAsc">По возрастанию</option>
                            <option value="SizeDesc">По убыванию</option>
                        </select>
                        <button class="uk-button uk-button-default" type="button" tabindex="-1">
                            <span style="text-transform: none;"></span>
                            <span uk-icon="icon: chevron-down"></span>
                        </button>
                    </div>
                    
                    <div uk-form-custom="target: > * > span:first-child">
                        <label for="InRent" class="rent-filter-label">Статус:</label>
                        <select id="InRent" name="InRent">
                            <option value="">Все</option>
                            <option value="true">Занято</option>
                            <option value="false">Свободно</option>
                        </select>
                        <button class="uk-button uk-button-default" type="button" tabindex="-1">
                            <span style="text-transform: none;"></span>
                            <span uk-icon="icon: chevron-down"></span>
                        </button>
                    </div>
                    
                    <button type="submit" class="lg-small-btn">Применить</button>
                </div>
            </form>
            <button onclick="location.href='@Url.Action("Calculator", "Place")'" class="dg-large-btn">Калькулятор аренды</button>
        </div>
    </section>
    

    <section class="rent">
        <div class="rent-container">
            <div class="rent-switch-container">
                <label class="rent-switch-text">Список</label>
                <label class="rent-switch-label" id="list-label">
                    <input type="checkbox" class="rent-switch-input" id="view-switch" />
                    <span class="rent-switch-slider"></span>
                </label>
                <label class="rent-switch-text">Карточки</label>
            </div>
            <div id="places-container">
                @Html.Partial("_PlaceList", Model)
            </div>
        </div>
    </section>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const filterForm = document.getElementById("filter-form");
            const placesContainer = document.getElementById("places-container");
            const viewSwitch = document.getElementById("view-switch");

            function toggleView() {
                const listView = document.getElementById("list-view");
                const cardView = document.getElementById("card-view");

                if (viewSwitch.checked) {
                    listView.style.display = "none";
                    cardView.style.display = "block";
                } else {
                    listView.style.display = "block";
                    cardView.style.display = "none";
                }
            }

            filterForm.addEventListener("submit", function (event) {
                event.preventDefault();
                applyFilters();
            });

            // Restore filter values from localStorage
            const selectElements = filterForm.querySelectorAll("select");
            selectElements.forEach(select => {
                const selectedValue = localStorage.getItem(select.id);
                if (selectedValue) {
                    select.value = selectedValue;
                }

                select.addEventListener("change", function () {
                    localStorage.setItem(select.id, select.value);
                });
            });

            // Load saved view mode
            const savedViewMode = localStorage.getItem("view-switch");
            if (savedViewMode === "card") {
                viewSwitch.checked = true;
            } else {
                viewSwitch.checked = false;
            }
            toggleView();

            viewSwitch.addEventListener("change", function () {
                if (viewSwitch.checked) {
                    localStorage.setItem("view-switch", "card");
                } else {
                    localStorage.setItem("view-switch", "list");
                }
                toggleView();
            });

            function applyFilters() {
                const formData = new FormData(filterForm);
                const queryString = new URLSearchParams(formData).toString();
                const url = `${filterForm.action}?${queryString}`;

                // Save filter values to localStorage
                formData.forEach((value, key) => {
                    localStorage.setItem(key, value);
                });

                fetch(url, {
                    method: "GET",
                    headers: {
                        "X-Requested-With": "XMLHttpRequest"
                    }
                })
                    .then(response => response.text())
                    .then(html => {
                        placesContainer.innerHTML = html;
                        addUnauthorizedRentListeners();
                        toggleView(); // Restore view after fetching data
                    })
                    .catch(error => console.error("Error:", error));
            }

            function addUnauthorizedRentListeners() {
                const rentButtons = document.querySelectorAll(".unauthorized-rent-btn");

                rentButtons.forEach(button => {
                    button.addEventListener("click", function (event) {
                        event.preventDefault();
                        alert("Для аренды необходимо авторизоваться");
                    });
                });
            }

            addUnauthorizedRentListeners();

            // Automatically apply filters on page load
            applyFilters();
        });
    </script>

</main>


